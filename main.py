import unittest
from SoftwareEngineeringProject import *


class TestRetirementCalculator(unittest.TestCase):
    def setUp(self):
        self.rc = RetirementCalculator()

    # SUPPORTS REQUIREMENT Non-Functional 4.
    def test_filePermissions(self):
        self.assertEquals(self.rc.read_file(), True)
        self.assertEquals(self.rc.write_file(), True)

    # SUPPORTS REQUIREMENT Non-Functional 7
    # The user shall attempt to access the information generated by the program without authorization and be successful

    # SUPPORTS REQUIREMENT Storage Requirement 2
    # The user of the program shall download and install Python 3 from https://www.python.org/

    # SUPPORTS REQUIREMENT Storage Requirements 3 & 4
    # The user of the program shall determine the installation location of Python and then check their device's
    # properties the drive that Python is installed on shall either be an SSD or an HDD.

    # SUPPORTS REQUIREMENT Functional Requirement 8.a
    def test_paidToEmployee(self):
        self.assertTrue(float(self.rc.paidToEmployee), "paidToEmployee is not a valid number!")
        self.assertTrue((self.rc.paidToEmployee >= 0), "paidToEmployee cannot be negative!")

    # SUPPORTS REQUIREMENT Functional Requirement 8.b
    def test_employeeContribution(self):
        self.assertTrue(float(self.rc.employeeContribution), "employeeContribution is not a valid number!")
        self.assertTrue((self.rc.employeeContribution >= 0), "employeeContribution cannot be negative!")

    # SUPPORTS REQUIREMENT Functional Requirement 8.c
    def test_companyContributions(self):
        self.assertTrue(float(self.rc.companyContribution), "companyContributions is not a valid number!")
        self.assertTrue(self.rc.companyContribution >= 0, "companyContributions cannot be negative!")

    # SUPPORTS REQUIREMENT Functional Requirement 8.d
    def test_totalContributions(self):
        self.assertEqual(self.rc.totalContributions, (self.rc.employeeContribution + self.rc.companyContribution),
                         "Total contributions is not equal to sum of employee and company contributions!")

    # SUPPORTS REQUIREMENT Functional Requirement 9
    def test_display(self):
        self.assertTrue(self.rc.totalContributions.display(1).find(f'{0}', self.rc.paidToEmployee) != -1,
                        'The display output must contain the amount paid to the employee!')
        self.assertTrue(self.rc.totalContributions.display(2).find(f'{0}', self.rc.employeeContribution) != -1,
                        'The display output must contain the amount the employee contributed!')
        self.assertTrue(self.rc.totalContributions.display(3).find(f'{0}', self.rc.companyContribution) != -1,
                        'The display output must contain the amount the company contributed!')
        self.assertTrue(self.rc.totalContributions.display(4).find(f'{0}', self.rc.companyContribution) != -1,
                        'The display output must contain the amount the total contributions!')


if __name__ == '__main__':
    unittest.main()
